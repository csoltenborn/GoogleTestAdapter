//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GoogleTestAdapter {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("GoogleTestAdapter.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of actual test case durations: {0}.
        /// </summary>
        internal static string ActualTestCase {
            get {
                return ResourceManager.GetString("ActualTestCase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Added test case &apos;{0}&apos;.
        /// </summary>
        internal static string AddedTestCase {
            get {
                return ResourceManager.GetString("AddedTestCase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}Test case already in analyzer: {1}.
        /// </summary>
        internal static string AlreadyInAnalyzer {
            get {
                return ResourceManager.GetString("AlreadyInAnalyzer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attaching debugger to {0}.
        /// </summary>
        internal static string AttachDebuggerMessage {
            get {
                return ResourceManager.GetString("AttachDebuggerMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Average difference between expected and actual duration: {0} ms.
        /// </summary>
        internal static string AvgDifference {
            get {
                return ResourceManager.GetString("AvgDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}{1}: Did not find file: {2}.
        /// </summary>
        internal static string BatchFileMissing {
            get {
                return ResourceManager.GetString("BatchFileMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}{1}: Exited with code {2}, executed command: &apos;{3}&apos;.
        /// </summary>
        internal static string BatchReturnedExitCode {
            get {
                return ResourceManager.GetString("BatchReturnedExitCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Misc.
        /// </summary>
        internal static string CategoryMiscName {
            get {
                return ResourceManager.GetString("CategoryMiscName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parallelization.
        /// </summary>
        internal static string CategoryParallelizationName {
            get {
                return ResourceManager.GetString("CategoryParallelizationName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Runtime behavior.
        /// </summary>
        internal static string CategoryRuntimeBehaviorName {
            get {
                return ResourceManager.GetString("CategoryRuntimeBehaviorName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test execution.
        /// </summary>
        internal static string CategoryTestExecutionName {
            get {
                return ResourceManager.GetString("CategoryTestExecutionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Regexes for trait assignment.
        /// </summary>
        internal static string CategoryTraitsName {
            get {
                return ResourceManager.GetString("CategoryTraitsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}Collected {1} test result(s) from result XML file {2}.
        /// </summary>
        internal static string CollectedResults {
            get {
                return ResourceManager.GetString("CollectedResults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}Collected {1} test results from console output.
        /// </summary>
        internal static string CollectedResultsFromConsole {
            get {
                return ResourceManager.GetString("CollectedResultsFromConsole", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command executed: &apos;{0} {1}&apos;, working directory: &apos;{2}&apos;.
        /// </summary>
        internal static string CommandExecuted {
            get {
                return ResourceManager.GetString("CommandExecuted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exceeded maximum allowed command line length ({0}) after including {1} tests (next string length is {2}).
        /// </summary>
        internal static string CommandLineGeneratorError {
            get {
                return ResourceManager.GetString("CommandLineGeneratorError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not list test cases for executable &apos;{0}&apos;: process execution failed with exit code {1}.
        /// </summary>
        internal static string CouldNotListTestCases {
            get {
                return ResourceManager.GetString("CouldNotListTestCases", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not terminate process {0} started at {1}: {2}.
        /// </summary>
        internal static string CouldNotTerminate {
            get {
                return ResourceManager.GetString("CouldNotTerminate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to reason is probably a crash of test {0}.
        /// </summary>
        internal static string CrashTest {
            get {
                return ResourceManager.GetString("CrashTest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !! This test has probably CRASHED !!.
        /// </summary>
        internal static string CrashText {
            get {
                return ResourceManager.GetString("CrashText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}Created {1} test results for tests which were neither found in result XML file nor in console output.
        /// </summary>
        internal static string CreatedTestResults {
            get {
                return ResourceManager.GetString("CreatedTestResults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note that due to restrictions of the VS Unit Testing framework, the test executable&apos;s output can not be displayed in the test console when debugging tests!.
        /// </summary>
        internal static string DebuggerAttachedOutputMessage {
            get {
                return ResourceManager.GetString("DebuggerAttachedOutputMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}Could not delete test directory &apos;{1}&apos;: {2}.
        /// </summary>
        internal static string DeleteTestDir {
            get {
                return ResourceManager.GetString("DeleteTestDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} - directory containing the test executable.
        /// </summary>
        internal static string DescriptionOfExecutableDirPlaceHolder {
            get {
                return ResourceManager.GetString("DescriptionOfExecutableDirPlaceHolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} - path of a directory which can be used by the tests
        ///{1} - id of the thread executing the current tests.
        /// </summary>
        internal static string DescriptionOfPlaceholdersForBatches {
            get {
                return ResourceManager.GetString("DescriptionOfPlaceholdersForBatches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} - executable containing the tests.
        /// </summary>
        internal static string DescriptionOfPlaceholdersForExecutables {
            get {
                return ResourceManager.GetString("DescriptionOfPlaceholdersForExecutables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} - directory of the solution (only available inside Visual Studio).
        /// </summary>
        internal static string DescriptionOfSolutionDirPlaceHolder {
            get {
                return ResourceManager.GetString("DescriptionOfSolutionDirPlaceHolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} does not match custom regex {1}.
        /// </summary>
        internal static string DoesntMatchCustom {
            get {
                return ResourceManager.GetString("DoesntMatchCustom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} does not match default regex {1}.
        /// </summary>
        internal static string DoesntMatchDefault {
            get {
                return ResourceManager.GetString("DoesntMatchDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; End of Output.
        /// </summary>
        internal static string EndOfOutputMessage {
            get {
                return ResourceManager.GetString("EndOfOutputMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}Exception while running tests: {1}.
        /// </summary>
        internal static string ExceptionMessage {
            get {
                return ResourceManager.GetString("ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception while resolving test locations and traits in {0}\n{1}.
        /// </summary>
        internal static string ExceptionResolving {
            get {
                return ResourceManager.GetString("ExceptionResolving", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Executable {0} came from another computer and was blocked to help protect this computer..
        /// </summary>
        internal static string ExecutableError {
            get {
                return ResourceManager.GetString("ExecutableError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}In particular: launch command prompt, change into directory &apos;{1}&apos;, and execute the following command to make sure your tests can be run in general.{2}{3} {4}.
        /// </summary>
        internal static string ExecuteSteps {
            get {
                return ResourceManager.GetString("ExecuteSteps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}Execution has been cancelled: {1}.
        /// </summary>
        internal static string ExecutionCancelled {
            get {
                return ResourceManager.GetString("ExecutionCancelled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Execution is already running with settings for executable {0}, cannot switch to settings for {1}.
        /// </summary>
        internal static string ExecutionString {
            get {
                return ResourceManager.GetString("ExecutionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}Execution took {1}.
        /// </summary>
        internal static string ExecutionTime {
            get {
                return ResourceManager.GetString("ExecutionTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} expected durations have been found in actual durations.
        /// </summary>
        internal static string ExpectedDurations {
            get {
                return ResourceManager.GetString("ExpectedDurations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of expected test case durations: {0}.
        /// </summary>
        internal static string ExpectedTestCase {
            get {
                return ResourceManager.GetString("ExpectedTestCase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Google Test indicator file found for executable {0}.
        /// </summary>
        internal static string FileFound {
            get {
                return ResourceManager.GetString("FileFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Google Test indicator file found for executable {0}.
        /// </summary>
        internal static string FileNotFound {
            get {
                return ResourceManager.GetString("FileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found {0} test method symbols and {1} trait symbols in binary {2}, pdb {3}.
        /// </summary>
        internal static string FoundTestMethod {
            get {
                return ResourceManager.GetString("FoundTestMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid file {0}. {1}.
        /// </summary>
        internal static string InvalidFile {
            get {
                return ResourceManager.GetString("InvalidFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid regular expression &quot;{0}&quot;, exception message: {1}.
        /// </summary>
        internal static string InvalidRegularExpression {
            get {
                return ResourceManager.GetString("InvalidRegularExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find source location for test {0}.
        /// </summary>
        internal static string LocationNotFoundError {
            get {
                return ResourceManager.GetString("LocationNotFoundError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} matches custom regex {1}.
        /// </summary>
        internal static string MatchesCustom {
            get {
                return ResourceManager.GetString("MatchesCustom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} matches default regex {1}.
        /// </summary>
        internal static string MatchesDefault {
            get {
                return ResourceManager.GetString("MatchesDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} must never be &lt; 0.
        /// </summary>
        internal static string NeverBeZero {
            get {
                return ResourceManager.GetString("NeverBeZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No known test case for test result of line &apos;{0}&apos; - are you repeating a test run, but tests have changed in the meantime?.
        /// </summary>
        internal static string NoKnownTestCaseMessage {
            get {
                return ResourceManager.GetString("NoKnownTestCaseMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command produced no output.
        /// </summary>
        internal static string NoOutput {
            get {
                return ResourceManager.GetString("NoOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No settings configured for test executable &apos;{0}&apos;; running with solution settings: {1}.
        /// </summary>
        internal static string NoSettingConfigured {
            get {
                return ResourceManager.GetString("NoSettingConfigured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note that no test output will be shown on the test console when executing tests concurrently!.
        /// </summary>
        internal static string NoTestOutputShown {
            get {
                return ResourceManager.GetString("NoTestOutputShown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nothing to report..
        /// </summary>
        internal static string NothingToReport {
            get {
                return ResourceManager.GetString("NothingToReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found {0} tests in executable {1}.
        /// </summary>
        internal static string NumberOfTestsMessage {
            get {
                return ResourceManager.GetString("NumberOfTestsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Running {0} tests....
        /// </summary>
        internal static string NumberOfTestsRunningMessage {
            get {
                return ResourceManager.GetString("NumberOfTestsRunningMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Additional test execution parameters.
        /// </summary>
        internal static string OptionAdditionalTestExecutionParams {
            get {
                return ResourceManager.GetString("OptionAdditionalTestExecutionParams", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Additional parameters for Google Test executable. Placeholders:.
        /// </summary>
        internal static string OptionAdditionalTestExecutionParamsDescription {
            get {
                return ResourceManager.GetString("OptionAdditionalTestExecutionParamsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test setup batch file.
        /// </summary>
        internal static string OptionBatchForTestSetup {
            get {
                return ResourceManager.GetString("OptionBatchForTestSetup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Batch file to be executed before test execution. If tests are executed in parallel, the batch file will be executed once per thread. Placeholders:.
        /// </summary>
        internal static string OptionBatchForTestSetupDescription {
            get {
                return ResourceManager.GetString("OptionBatchForTestSetupDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test teardown batch file.
        /// </summary>
        internal static string OptionBatchForTestTeardown {
            get {
                return ResourceManager.GetString("OptionBatchForTestTeardown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Batch file to be executed after test execution. If tests are executed in parallel, the batch file will be executed once per thread. Placeholders:.
        /// </summary>
        internal static string OptionBatchForTestTeardownDescription {
            get {
                return ResourceManager.GetString("OptionBatchForTestTeardownDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Break on failure.
        /// </summary>
        internal static string OptionBreakOnFailure {
            get {
                return ResourceManager.GetString("OptionBreakOnFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled, a potentially attached debugger will catch assertion failures and automatically drop into interactive mode.
        ///Google Test option: {0}.
        /// </summary>
        internal static string OptionBreakOnFailureDescription {
            get {
                return ResourceManager.GetString("OptionBreakOnFailureDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Catch exceptions.
        /// </summary>
        internal static string OptionCatchExceptions {
            get {
                return ResourceManager.GetString("OptionCatchExceptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Google Test catches exceptions by default; the according test fails and test execution continues. Choosing false lets exceptions pass through, allowing the debugger to catch them.
        ///Google Test option: {0}.
        /// </summary>
        internal static string OptionCatchExceptionsDescription {
            get {
                return ResourceManager.GetString("OptionCatchExceptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Print debug info.
        /// </summary>
        internal static string OptionDebugMode {
            get {
                return ResourceManager.GetString("OptionDebugMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If true, debug output will be printed to the test console..
        /// </summary>
        internal static string OptionDebugModeDescription {
            get {
                return ResourceManager.GetString("OptionDebugModeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parallel test execution.
        /// </summary>
        internal static string OptionEnableParallelTestExecution {
            get {
                return ResourceManager.GetString("OptionEnableParallelTestExecution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parallel test execution is achieved by means of different threads, each of which is assigned a number of tests to be executed. The threads will then sequentially invoke the necessary executables to produce the according test results..
        /// </summary>
        internal static string OptionEnableParallelTestExecutionDescription {
            get {
                return ResourceManager.GetString("OptionEnableParallelTestExecutionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Terminate processes on cancel.
        /// </summary>
        internal static string OptionKillProcessesOnCancel {
            get {
                return ResourceManager.GetString("OptionKillProcessesOnCancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If true, running test executables are actively terminated if the test execution is canceled. Note that terminating a test process might have all kinds of side effects; in particular, Google Test will not be able to perform any shutdown tasks..
        /// </summary>
        internal static string OptionKillProcessesOnCancelDescription {
            get {
                return ResourceManager.GetString("OptionKillProcessesOnCancelDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum number of threads.
        /// </summary>
        internal static string OptionMaxNrOfThreads {
            get {
                return ResourceManager.GetString("OptionMaxNrOfThreads", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum number of threads to be used for test execution (0: one thread for each processor)..
        /// </summary>
        internal static string OptionMaxNrOfThreadsDescription {
            get {
                return ResourceManager.GetString("OptionMaxNrOfThreadsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of test repetitions.
        /// </summary>
        internal static string OptionNrOfTestRepetitions {
            get {
                return ResourceManager.GetString("OptionNrOfTestRepetitions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tests will be run for the selected number of times (-1: infinite).
        ///Google Test option: {0}.
        /// </summary>
        internal static string OptionNrOfTestRepetitionsDescription {
            get {
                return ResourceManager.GetString("OptionNrOfTestRepetitionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parse symbol information.
        /// </summary>
        internal static string OptionParseSymbolInformation {
            get {
                return ResourceManager.GetString("OptionParseSymbolInformation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parse debug symbol information for test executables to obtain source location information and traits (defined via the macros in GTA_Traits.h).
        ///If this is set to false, step 2 of traits discovery will be left out and only traits regexes will be effective..
        /// </summary>
        internal static string OptionParseSymbolInformationDescription {
            get {
                return ResourceManager.GetString("OptionParseSymbolInformationDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PATH extension.
        /// </summary>
        internal static string OptionPathExtension {
            get {
                return ResourceManager.GetString("OptionPathExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If non-empty, the content will be appended to the PATH variable of the test execution and discovery processes.
        ///Example: C:\MyBins;{0}\MyOtherBins;
        ///Placeholders:.
        /// </summary>
        internal static string OptionPathExtensionDescription {
            get {
                return ResourceManager.GetString("OptionPathExtensionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Print test output.
        /// </summary>
        internal static string OptionPrintTestOutput {
            get {
                return ResourceManager.GetString("OptionPrintTestOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Print the output of the Google Test executable(s) to the Tests Output window..
        /// </summary>
        internal static string OptionPrintTestOutputDescription {
            get {
                return ResourceManager.GetString("OptionPrintTestOutputDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Also run disabled tests.
        /// </summary>
        internal static string OptionRunDisabledTests {
            get {
                return ResourceManager.GetString("OptionRunDisabledTests", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If true, all (selected) tests will be run, even if they have been disabled.
        ///Google Test option: {0}.
        /// </summary>
        internal static string OptionRunDisabledTestsDescription {
            get {
                return ResourceManager.GetString("OptionRunDisabledTestsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show release notes after update.
        /// </summary>
        internal static string OptionShowReleaseNotes {
            get {
                return ResourceManager.GetString("OptionShowReleaseNotes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If true, a dialog with release notes is shown after the extension has been updated..
        /// </summary>
        internal static string OptionShowReleaseNotesDescription {
            get {
                return ResourceManager.GetString("OptionShowReleaseNotesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shuffle tests per execution.
        /// </summary>
        internal static string OptionShuffleTests {
            get {
                return ResourceManager.GetString("OptionShuffleTests", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If true, tests will be executed in random order. Note that a true randomized order is only given when executing all tests in non-parallel fashion. Otherwise, the test excutables will most likely be executed more than once - random order is than restricted to the according executions.
        ///Google Test option: {0}.
        /// </summary>
        internal static string OptionShuffleTestsDescription {
            get {
                return ResourceManager.GetString("OptionShuffleTestsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shuffle tests: Seed.
        /// </summary>
        internal static string OptionShuffleTestsSeed {
            get {
                return ResourceManager.GetString("OptionShuffleTestsSeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0: Seed is computed from system time, 1&lt;=n&lt;={0}: The given seed is used. See note of option &apos;{1}&apos;.
        ///Google Test option: {2}.
        /// </summary>
        internal static string OptionShuffleTestsSeedDescription {
            get {
                return ResourceManager.GetString("OptionShuffleTestsSeedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Regex for test discovery.
        /// </summary>
        internal static string OptionTestDiscoveryRegex {
            get {
                return ResourceManager.GetString("OptionTestDiscoveryRegex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If non-empty, this regex will be used to discover the Google Test executables containing your tests.
        ///Default regex: {0}.
        /// </summary>
        internal static string OptionTestDiscoveryRegexDescription {
            get {
                return ResourceManager.GetString("OptionTestDiscoveryRegexDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test discovery timeout in s.
        /// </summary>
        internal static string OptionTestDiscoveryTimeoutInSeconds {
            get {
                return ResourceManager.GetString("OptionTestDiscoveryTimeoutInSeconds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of seconds after which test discovery will be assumed to have failed. 0: Infinite timeout.
        /// </summary>
        internal static string OptionTestDiscoveryTimeoutInSecondsDescription {
            get {
                return ResourceManager.GetString("OptionTestDiscoveryTimeoutInSecondsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test name separator.
        /// </summary>
        internal static string OptionTestNameSeparator {
            get {
                return ResourceManager.GetString("OptionTestNameSeparator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test names produced by Google Test might contain the character &apos;/&apos;, which makes Visual Studio cut the name after the &apos;/&apos; if the Test Explorer window is not wide enough. This option&apos;s value, if non-empty, will replace the &apos;/&apos; character to avoid that behavior. Note that &apos;\&apos;, &apos; &apos;, &apos;|&apos;, and &apos;-&apos; produce the same behavior (&apos;.&apos;, &apos;_&apos;, &apos;:&apos;, and &apos;::&apos; are known to work). Note also that traits regexes are evaluated against the tests&apos; display names (and must thus be consistent with this option)..
        /// </summary>
        internal static string OptionTestNameSeparatorDescription {
            get {
                return ResourceManager.GetString("OptionTestNameSeparatorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timestamp output.
        /// </summary>
        internal static string OptionTimestampOutput {
            get {
                return ResourceManager.GetString("OptionTimestampOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If true, a timestamp is added to test and debug output..
        /// </summary>
        internal static string OptionTimestampOutputDescription {
            get {
                return ResourceManager.GetString("OptionTimestampOutputDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows to override/add traits for testcases matching a regex. Traits are build up in 3 phases. First, traits are assigned to tests according to the &apos;Traits before&apos; option. Next, the tests&apos; traits (defined via the macros in GTA_Traits.h) are added to the tests, overriding traits from phase 1 with new values. Finally, the &apos;Traits after&apos; option is evaluated, again in an overriding manner.
        ///Syntax: {0} separates the regex from the traits, the trait&apos;s name and value are separated by {1} and each pair of regex an [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OptionTraitsDescription {
            get {
                return ResourceManager.GetString("OptionTraitsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to After test discovery.
        /// </summary>
        internal static string OptionTraitsRegexesAfter {
            get {
                return ResourceManager.GetString("OptionTraitsRegexesAfter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Before test discovery.
        /// </summary>
        internal static string OptionTraitsRegexesBefore {
            get {
                return ResourceManager.GetString("OptionTraitsRegexesBefore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use new test execution framework (experimental).
        /// </summary>
        internal static string OptionUseNewTestExecutionFramework {
            get {
                return ResourceManager.GetString("OptionUseNewTestExecutionFramework", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make use of the new test execution framework. Advantages: test crash detection and test output printing also work in debug mode..
        /// </summary>
        internal static string OptionUseNewTestExecutionFrameworkDescription {
            get {
                return ResourceManager.GetString("OptionUseNewTestExecutionFrameworkDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Working directory.
        /// </summary>
        internal static string OptionWorkingDir {
            get {
                return ResourceManager.GetString("OptionWorkingDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If non-empty, will set the working directory for running the tests (default: {0})
        ///Example: {1}\MyTestDir
        ///Placeholders:.
        /// </summary>
        internal static string OptionWorkingDirDescription {
            get {
                return ResourceManager.GetString("OptionWorkingDirDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output file does not exist, did your tests crash?.
        /// </summary>
        internal static string OutputFileMissing {
            get {
                return ResourceManager.GetString("OutputFileMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output of command:.
        /// </summary>
        internal static string OutputOfCommand {
            get {
                return ResourceManager.GetString("OutputOfCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Output of command &apos;{1} {2}&apos;.
        /// </summary>
        internal static string OutputOfCommandMessage {
            get {
                return ResourceManager.GetString("OutputOfCommandMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parallel execution is selected in options, but tests are executed sequentially because debugger is attached..
        /// </summary>
        internal static string ParallelExecution {
            get {
                return ResourceManager.GetString("ParallelExecution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not parse duration in line &apos;{0}&apos;.
        /// </summary>
        internal static string ParseDurationMessage {
            get {
                return ResourceManager.GetString("ParseDurationMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not parse pair &apos;{0}&apos;, exception message: {1}.
        /// </summary>
        internal static string ParsePair {
            get {
                return ResourceManager.GetString("ParsePair", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Process has exited with code {0}.
        /// </summary>
        internal static string ProcessExitCode {
            get {
                return ResourceManager.GetString("ProcessExitCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not read test durations: {0}.
        /// </summary>
        internal static string ReadTestDurationError {
            get {
                return ResourceManager.GetString("ReadTestDurationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Regex &apos;{0}&apos; cannot be parsed: {1}.
        /// </summary>
        internal static string RegexParseError {
            get {
                return ResourceManager.GetString("RegexParseError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Regex &apos;{0}&apos; timed out: {1}.
        /// </summary>
        internal static string RegexTimedOut {
            get {
                return ResourceManager.GetString("RegexTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}Reported {1} test results to Visual Studio during test execution, executable: &apos;{2}&apos;.
        /// </summary>
        internal static string ReportedResultsToVS {
            get {
                return ResourceManager.GetString("ReportedResultsToVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}Reported {1} test results to Visual Studio, executable: &apos;{2}&apos;, duration: {3}.
        /// </summary>
        internal static string ReportedTestResults {
            get {
                return ResourceManager.GetString("ReportedTestResults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restoring solution settings: {0}.
        /// </summary>
        internal static string RestoringSolutionSettings {
            get {
                return ResourceManager.GetString("RestoringSolutionSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test {0}: Expected {1} ms, actual {2} ms.
        /// </summary>
        internal static string Results {
            get {
                return ResourceManager.GetString("Results", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}{1}: Exception caught, message: &apos;{2}&apos;, executed command: &apos;{3}&apos;.
        /// </summary>
        internal static string RunBatchException {
            get {
                return ResourceManager.GetString("RunBatchException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}Failed to run test executable &apos;{1}&apos;: {2}.
        /// </summary>
        internal static string RunExecutableError {
            get {
                return ResourceManager.GetString("RunExecutableError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &gt;&gt;&gt; Scheduling statistics &lt;&lt;&lt;.
        /// </summary>
        internal static string SchedulingStats {
            get {
                return ResourceManager.GetString("SchedulingStats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings for test executable &apos;{0}&apos;: {1}.
        /// </summary>
        internal static string SettingsMessage {
            get {
                return ResourceManager.GetString("SettingsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SettingsWrapper is already running with settings for an executable on thread &apos;{0}&apos;, cannot also be used by thread &apos;{1}&apos;.
        /// </summary>
        internal static string SettingsWrapperString {
            get {
                return ResourceManager.GetString("SettingsWrapperString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}Stack trace:{1}{2}.
        /// </summary>
        internal static string StackTrace {
            get {
                return ResourceManager.GetString("StackTrace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Standard deviation: {0} ms.
        /// </summary>
        internal static string StandardDeviation {
            get {
                return ResourceManager.GetString("StandardDeviation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}{1}: Successfully ran &apos;{2}&apos;.
        /// </summary>
        internal static string SuccessfullyRun {
            get {
                return ResourceManager.GetString("SuccessfullyRun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Terminated process {0} started at {1}.
        /// </summary>
        internal static string TerminatedProcess {
            get {
                return ResourceManager.GetString("TerminatedProcess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test case already in analyzer: {0}.
        /// </summary>
        internal static string TestCaseInAnalyzer {
            get {
                return ResourceManager.GetString("TestCaseInAnalyzer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}{1} test cases seem to not have been run - are you repeating a test run, but tests have changed in the meantime? Test cases:{2}{3}.
        /// </summary>
        internal static string TestCaseNotRun {
            get {
                return ResourceManager.GetString("TestCaseNotRun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test whether the following commands can be executed sucessfully on the command line (make sure all required binaries are on the PATH):{0}{1}.
        /// </summary>
        internal static string TestCommandCanBeRun {
            get {
                return ResourceManager.GetString("TestCommandCanBeRun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test discovery was cancelled after {0} s for executable {1}.
        /// </summary>
        internal static string TestDiscoveryCancelled {
            get {
                return ResourceManager.GetString("TestDiscoveryCancelled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test output:.
        /// </summary>
        internal static string TestOutput {
            get {
                return ResourceManager.GetString("TestOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test result file {0} could not be parsed (completely) - your test executable has probably crashed. Exception message: {1}.
        /// </summary>
        internal static string TestResultParse {
            get {
                return ResourceManager.GetString("TestResultParse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test setup batch file.
        /// </summary>
        internal static string TestSetupBatchFile {
            get {
                return ResourceManager.GetString("TestSetupBatchFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test teardown batch file.
        /// </summary>
        internal static string TestTeardownBatchFile {
            get {
                return ResourceManager.GetString("TestTeardownBatchFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Executing tests on {0} threads.
        /// </summary>
        internal static string ThreadExecutionMessage {
            get {
                return ResourceManager.GetString("ThreadExecutionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown literal: {0}.
        /// </summary>
        internal static string UnknownLiteral {
            get {
                return ResourceManager.GetString("UnknownLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown test case status: {0}.
        /// </summary>
        internal static string UnknownTestCase {
            get {
                return ResourceManager.GetString("UnknownTestCase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using splitter based on test durations.
        /// </summary>
        internal static string UsingSplitterOnDuration {
            get {
                return ResourceManager.GetString("UsingSplitterOnDuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using splitter based on number of tests.
        /// </summary>
        internal static string UsingSplitterOnNumber {
            get {
                return ResourceManager.GetString("UsingSplitterOnNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} worst differences:.
        /// </summary>
        internal static string WorstDifferences {
            get {
                return ResourceManager.GetString("WorstDifferences", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XmlNode could not be parsed: &apos;{0}&apos;. Exception message: {1}.
        /// </summary>
        internal static string XmlNodeParse {
            get {
                return ResourceManager.GetString("XmlNodeParse", resourceCulture);
            }
        }
    }
}
