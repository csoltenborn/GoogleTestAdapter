<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="OptionBreakOnFailureDescription" xml:space="preserve">
    <value>有効な場合、接続されている可能性のあるデバッガーがアサーション エラーをキャッチし、自動的に対話型モードになります。
Google Test オプション: {0}</value>
  </data>
  <data name="OutputOfCommandMessage" xml:space="preserve">
    <value>{0}&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;コマンドの出力 '{1} {2}'</value>
  </data>
  <data name="CouldNotListTestCases" xml:space="preserve">
    <value>実行可能ファイル '{0}' のテスト ケースをリストできませんでした: プロセス実行は終了コード {1} で失敗しました</value>
  </data>
  <data name="OptionTestNameSeparatorDescription" xml:space="preserve">
    <value>Google Test によって生成されるテスト名には '/' 文字が含まれることがありますが、テスト エクスプローラー ウィンドウが十分な長さではない場合、'/' の後の名前は Visual Studio によって切り取られます。このオプションが空でない場合、その値によって '/' 文字が置き換えられて、この動作が回避されます。'\'、' '、'|'、'-' も同じ動作になります ('.'、'_'、':'、'::' は正常に機能することが分かっています)。また、特徴の正規表現がテストの表示名に照らして評価されます (したがって、このオプションと一貫性がなければなりません)。</value>
  </data>
  <data name="ActualTestCase" xml:space="preserve">
    <value>実際のテスト ケース期間数: {0}</value>
  </data>
  <data name="CollectedResultsFromConsole" xml:space="preserve">
    <value>{0}コンソール出力から {1} 件のテスト結果が収集されました</value>
  </data>
  <data name="ProcessExitCode" xml:space="preserve">
    <value>プロセスがコード {0} で終了しました</value>
  </data>
  <data name="TerminatedProcess" xml:space="preserve">
    <value>{1} に開始したプロセス {0} を終了しました</value>
  </data>
  <data name="SuccessfullyRun" xml:space="preserve">
    <value>{0}{1}: '{2}' が正常に実行されました</value>
  </data>
  <data name="OptionShuffleTests" xml:space="preserve">
    <value>実行ごとにテストをシャッフル</value>
  </data>
  <data name="ExecutionCancelled" xml:space="preserve">
    <value>{0}実行は取り消されました: {1}</value>
  </data>
  <data name="CommandLineGeneratorError" xml:space="preserve">
    <value>{1} 個のテストを含めた後、コマンド ラインの最大許容長 ({0}) を超えました (次の文字列の長さ: {2})</value>
  </data>
  <data name="FoundTestMethod" xml:space="preserve">
    <value>バイナリ {2} で {0} 個のテスト メソッド シンボルと {1} 個の特徴シンボルが見つかりました</value>
  </data>
  <data name="OptionTestDiscoveryTimeoutInSeconds" xml:space="preserve">
    <value>テスト検出タイムアウト (秒)</value>
  </data>
  <data name="RunBatchException" xml:space="preserve">
    <value>{0}{1}: 例外がキャッチされました。メッセージ: '{2}'、実行されたコマンド: '{3}'</value>
  </data>
  <data name="DescriptionOfSolutionDirPlaceHolder" xml:space="preserve">
    <value>{0} - ソリューションのディレクトリ (Visual Studio の内部でのみ使用可能)</value>
  </data>
  <data name="OptionMaxNrOfThreads" xml:space="preserve">
    <value>スレッドの最大数</value>
  </data>
  <data name="OptionKillProcessesOnCancelDescription" xml:space="preserve">
    <value>True の場合、テストの実行がキャンセルされると、実行中のテスト実行可能ファイルが自動的に終了します。テスト プロセスが終了すると、あらゆる種類の副作用が生じる可能性があります。特に Google Test では、シャットダウン タスクが実行できなくなります。</value>
  </data>
  <data name="ExceptionMessage" xml:space="preserve">
    <value>{0}テストの実行中に例外が発生しました: {1}</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>実行可能ファイル {0} に関して Google Test インジケーター ファイルは見つかりませんでした</value>
  </data>
  <data name="OptionShuffleTestsSeedDescription" xml:space="preserve">
    <value>0: シードは、システム時間から計算されます。&lt;1&lt;=n&lt;={0}: 指定したシードが使用されます。オプション '{1}' の注を参照してください。
Google Test オプション: {2}</value>
  </data>
  <data name="TestCaseNotRun" xml:space="preserve">
    <value>{0}{1} 個のテスト ケースが実行されていない可能性があります。現在テストの実行を繰り返していて、その間にテストが変更されましたか? テスト ケース:{2}{3}</value>
  </data>
  <data name="OptionAdditionalTestExecutionParams" xml:space="preserve">
    <value>その他のテスト実行パラメーター</value>
  </data>
  <data name="FileFound" xml:space="preserve">
    <value>実行可能ファイル {0} に関して見つかった Google Test インジケーター ファイル</value>
  </data>
  <data name="ExpectedDurations" xml:space="preserve">
    <value>実際の期間には {0} 個の期間 (期待値) がありました</value>
  </data>
  <data name="OptionPathExtension" xml:space="preserve">
    <value>PATH 拡張</value>
  </data>
  <data name="RegexParseError" xml:space="preserve">
    <value>正規表現 '{0}' を解析できません: {1}</value>
  </data>
  <data name="OptionNrOfTestRepetitionsDescription" xml:space="preserve">
    <value>選択した回数、テストが実行されます (-1 は無限)。
Google Test オプション: {0}</value>
  </data>
  <data name="ExecuteSteps" xml:space="preserve">
    <value>{0}特に: テストが一般に実行可能であることを確認するには、コマンド プロンプトを起動し、ディレクトリ '{1}' に変更し、次のコマンドを実行します。{2}{3} {4}</value>
  </data>
  <data name="UsingSplitterOnNumber" xml:space="preserve">
    <value>テスト数に基づいてスプリッターを使用する</value>
  </data>
  <data name="UnknownLiteral" xml:space="preserve">
    <value>不明なリテラル: {0}</value>
  </data>
  <data name="OptionUseNewTestExecutionFramework" xml:space="preserve">
    <value>新しいテスト実行フレームワークを使用 (試験的)</value>
  </data>
  <data name="ParsePair" xml:space="preserve">
    <value>ペア '{0}' を解析できませんでした。例外メッセージ: {1}</value>
  </data>
  <data name="NumberOfTestsMessage" xml:space="preserve">
    <value>実行可能ファイル {1} で {0} 個のテストが見つかりました</value>
  </data>
  <data name="NoTestOutputShown" xml:space="preserve">
    <value>テストを同時実行すると、テスト コンソールにテスト出力は表示されません。</value>
  </data>
  <data name="OutputOfCommand" xml:space="preserve">
    <value>コマンドの出力:</value>
  </data>
  <data name="OptionPrintTestOutputDescription" xml:space="preserve">
    <value>テスト出力ウィンドウに Google Test 実行可能ファイルの出力を表示します。</value>
  </data>
  <data name="TestTeardownBatchFile" xml:space="preserve">
    <value>テストの teardown バッチ ファイル</value>
  </data>
  <data name="ExecutionTime" xml:space="preserve">
    <value>{0}実行にかかった時間: {1}</value>
  </data>
  <data name="OptionWorkingDir" xml:space="preserve">
    <value>作業ディレクトリ</value>
  </data>
  <data name="OptionBatchForTestTeardown" xml:space="preserve">
    <value>テストの teardown バッチ ファイル</value>
  </data>
  <data name="ParallelExecution" xml:space="preserve">
    <value>オプションで並列実行が選択されていますが、デバッガーがアタッチされているためテストは順番に実行されます。</value>
  </data>
  <data name="InvalidFile" xml:space="preserve">
    <value>ファイル {0} は無効です。{1}</value>
  </data>
  <data name="OptionTraitsRegexesAfter" xml:space="preserve">
    <value>テスト後探索</value>
  </data>
  <data name="MatchesDefault" xml:space="preserve">
    <value>{0} は既定の正規表現 {1} と一致します</value>
  </data>
  <data name="NoKnownTestCaseMessage" xml:space="preserve">
    <value>行 '{0}' のテスト結果の既知のテスト ケースがありません。現在テストの実行を繰り返していて、その間にテストが変更されましたか?</value>
  </data>
  <data name="TestDiscoveryCancelled" xml:space="preserve">
    <value>実行可能ファイル {1} のテストの検出が {0} 秒後に取り消されました</value>
  </data>
  <data name="OptionEnableParallelTestExecutionDescription" xml:space="preserve">
    <value>並列テスト実行は、複数のスレッドを使って実現されます。各スレッドには、実行する複数のテストが割り当てられます。そして、スレッドは必要な実行可能ファイルを順番に呼び出して、対応するテスト結果を生成します。</value>
  </data>
  <data name="AlreadyInAnalyzer" xml:space="preserve">
    <value>{0}既にアナライザーに含まれているテスト ケース: {1}</value>
  </data>
  <data name="OptionAdditionalTestExecutionParamsDescription" xml:space="preserve">
    <value>Google Test 実行可能ファイルのその他のパラメーター。プレースホルダー:</value>
  </data>
  <data name="WorstDifferences" xml:space="preserve">
    <value>下位 {0} 件の相違点:</value>
  </data>
  <data name="XmlNodeParse" xml:space="preserve">
    <value>XmlNode: '{0}' を解析できませんでした。例外メッセージ: {1}</value>
  </data>
  <data name="OptionKillProcessesOnCancel" xml:space="preserve">
    <value>キャンセル時にプロセスを終了</value>
  </data>
  <data name="RunExecutableError" xml:space="preserve">
    <value>{0}テスト実行可能ファイル '{1}' の実行に失敗しました: {2}</value>
  </data>
  <data name="StandardDeviation" xml:space="preserve">
    <value>標準偏差: {0} ミリ秒</value>
  </data>
  <data name="CategoryTraitsName" xml:space="preserve">
    <value>特徴の割り当てのための正規表現</value>
  </data>
  <data name="ExpectedTestCase" xml:space="preserve">
    <value>予想されたテスト ケース期間数: {0}</value>
  </data>
  <data name="OptionShowReleaseNotesDescription" xml:space="preserve">
    <value>True の場合、拡張機能が更新された後に、ダイアログにリリース ノートが表示されます。</value>
  </data>
  <data name="OptionUseNewTestExecutionFrameworkDescription" xml:space="preserve">
    <value>新しいテスト実行フレームワークを使用します。利点: テスト クラッシュの検出とテスト出力の表示もデバッグ モードで動作します。</value>
  </data>
  <data name="SchedulingStats" xml:space="preserve">
    <value>&gt;&gt;&gt; スケジュールの統計情報 &lt;&lt;&lt;</value>
  </data>
  <data name="OptionShowReleaseNotes" xml:space="preserve">
    <value>更新後にリリース ノートを表示</value>
  </data>
  <data name="CommandExecuted" xml:space="preserve">
    <value>実行されたコマンド: '{0} {1}'、作業ディレクトリ: '{2}'</value>
  </data>
  <data name="ExceptionResolving" xml:space="preserve">
    <value>{0} のテストの場所と特徴を解決中に例外が発生しました\n{1}</value>
  </data>
  <data name="DoesntMatchDefault" xml:space="preserve">
    <value>{0} は既定の正規表現 {1} と一致しません</value>
  </data>
  <data name="OptionNrOfTestRepetitions" xml:space="preserve">
    <value>テストの繰り返し回数</value>
  </data>
  <data name="NoOutput" xml:space="preserve">
    <value>コマンドによって出力は生成されませんでした</value>
  </data>
  <data name="BatchFileMissing" xml:space="preserve">
    <value>{0}{1}: ファイルが見つかりませんでした: {2}</value>
  </data>
  <data name="InvalidRegularExpression" xml:space="preserve">
    <value>正規表現 "{0}" が無効です。例外メッセージ: {1}</value>
  </data>
  <data name="OptionBreakOnFailure" xml:space="preserve">
    <value>エラーで中断</value>
  </data>
  <data name="OptionParseSymbolInformationDescription" xml:space="preserve">
    <value>テスト実行可能ファイルのデバッグ シンボル情報を解析し、ソースの場所情報と特徴 (GTA_Traits.h のマクロを使用して定義されている) を取得します。
これを false に設定すると、手順 2 の特徴検出は省略され、特徴の正規表現のみが有効になります。</value>
  </data>
  <data name="OptionTestNameSeparator" xml:space="preserve">
    <value>テスト名の区切り文字</value>
  </data>
  <data name="ReportedTestResults" xml:space="preserve">
    <value>{0}{1} 件のテスト結果が Visual Studio にレポートされました。実行可能ファイル: '{2}'、期間: {3}</value>
  </data>
  <data name="OptionMaxNrOfThreadsDescription" xml:space="preserve">
    <value>テストの実行に使用するスレッドの最大数 (0 の場合は、プロセッサごとに 1 スレッド)。</value>
  </data>
  <data name="EndOfOutputMessage" xml:space="preserve">
    <value>{0}&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 出力の最後</value>
  </data>
  <data name="NeverBeZero" xml:space="preserve">
    <value>{0} を 0 未満にすることはできません</value>
  </data>
  <data name="CategoryMiscName" xml:space="preserve">
    <value>その他</value>
  </data>
  <data name="OptionTimestampOutput" xml:space="preserve">
    <value>タイムスタンプ出力</value>
  </data>
  <data name="MatchesCustom" xml:space="preserve">
    <value>{0} はカスタム正規表現 {1} と一致します</value>
  </data>
  <data name="TestOutput" xml:space="preserve">
    <value>テスト出力:</value>
  </data>
  <data name="UnknownTestCase" xml:space="preserve">
    <value>不明なテスト ケースの状態: {0}</value>
  </data>
  <data name="OptionWorkingDirDescription" xml:space="preserve">
    <value>空でない場合、テスト実行用の作業ディレクトリが設定されます (既定値: {0})
例: {1}\MyTestDir
プレースホルダー:</value>
  </data>
  <data name="AvgDifference" xml:space="preserve">
    <value>予測と実際の期間の差の平均: {0} ミリ秒</value>
  </data>
  <data name="CollectedResults" xml:space="preserve">
    <value>{0}結果の XML ファイル {2} から {1} 件のテスト結果が収集されました</value>
  </data>
  <data name="OptionShuffleTestsDescription" xml:space="preserve">
    <value>True の場合、テストは、ランダムな順序で実行されます。本当にランダムな順序になるのは、すべてのテストを並列ではない方法で実行する場合のみです。その他の場合、テスト実行可能ファイルが複数回実行される可能性があります。ランダムな順序は対応する実行に限定されます。
Google Test オプション: {0}</value>
  </data>
  <data name="AttachDebuggerMessage" xml:space="preserve">
    <value>デバッガーを {0} にアタッチしています</value>
  </data>
  <data name="DoesntMatchCustom" xml:space="preserve">
    <value>{0} はカスタム正規表現 {1} と一致しません</value>
  </data>
  <data name="OptionDebugModeDescription" xml:space="preserve">
    <value>True の場合、デバッグ出力がテスト コンソールに出力されます。</value>
  </data>
  <data name="OptionRunDisabledTestsDescription" xml:space="preserve">
    <value>True の場合、(選択された) すべてのテストが、無効な状態なものも含めて実行されます。
Google Test オプション: {0}</value>
  </data>
  <data name="DescriptionOfExecutableDirPlaceHolder" xml:space="preserve">
    <value>{0} - テスト実行可能ファイルを含むディレクトリ</value>
  </data>
  <data name="CategoryTestExecutionName" xml:space="preserve">
    <value>テストの実行</value>
  </data>
  <data name="OptionDebugMode" xml:space="preserve">
    <value>デバッグ情報の出力</value>
  </data>
  <data name="DeleteTestDir" xml:space="preserve">
    <value>{0}テスト ディレクトリ '{1}' を削除できませんでした: {2}</value>
  </data>
  <data name="OptionShuffleTestsSeed" xml:space="preserve">
    <value>テストをシャッフル: シード</value>
  </data>
  <data name="CrashText" xml:space="preserve">
    <value>このテストはクラッシュした可能性があります。</value>
  </data>
  <data name="CrashTest" xml:space="preserve">
    <value>理由はテスト {0} のクラッシュが考えられます</value>
  </data>
  <data name="TestResultParse" xml:space="preserve">
    <value>テスト結果ファイル {0} を (完全には) 解析できませんでした。テスト実行可能ファイルがクラッシュしている可能性があります。例外メッセージ: {1}</value>
  </data>
  <data name="ReportedResultsToVS" xml:space="preserve">
    <value>{0}テストの実行中に {1} 件のテスト結果が Visual Studio にレポートされました。実行可能ファイル: '{2}'</value>
  </data>
  <data name="OptionRunDisabledTests" xml:space="preserve">
    <value>無効なテストも実行</value>
  </data>
  <data name="OptionTestDiscoveryTimeoutInSecondsDescription" xml:space="preserve">
    <value>テスト検出が失敗したと見なされるまでの経過時間 (秒単位)。0: タイムアウトしません</value>
  </data>
  <data name="OptionBatchForTestSetup" xml:space="preserve">
    <value>テストの setup バッチ ファイル</value>
  </data>
  <data name="OptionPathExtensionDescription" xml:space="preserve">
    <value>空でない場合、内容がテストの実行および探索プロセスの PATH 変数に追加されます。
例: C:\MyBins;{0}\MyOtherBins;
プレースホルダー:</value>
  </data>
  <data name="AddedTestCase" xml:space="preserve">
    <value>追加されたテスト ケース '{0}'</value>
  </data>
  <data name="NumberOfTestsRunningMessage" xml:space="preserve">
    <value>{0} 個のテストを実行しています...</value>
  </data>
  <data name="CreatedTestResults" xml:space="preserve">
    <value>{0}結果の XML ファイルにもコンソール出力にもないテストのテスト結果が {1} 件、作成されました</value>
  </data>
  <data name="TestCaseInAnalyzer" xml:space="preserve">
    <value>既にアナライザーに含まれているテスト ケース: {0}</value>
  </data>
  <data name="TestCommandCanBeRun" xml:space="preserve">
    <value>次のコマンドがコマンド ラインで正常に実行されるかどうかをテストします (必要なすべてのバイナリが PATH にあることを確認します):{0}{1}</value>
  </data>
  <data name="TestSetupBatchFile" xml:space="preserve">
    <value>テストの setup バッチ ファイル</value>
  </data>
  <data name="DebuggerAttachedOutputMessage" xml:space="preserve">
    <value>VS 単体テスト フレームワークの制限のため、テストのデバッグ時にテスト実行可能ファイルの出力をテスト コンソールに表示できません。</value>
  </data>
  <data name="BatchReturnedExitCode" xml:space="preserve">
    <value>{0}{1}: コード {2} で終了しました。実行されたコマンド: '{3}'</value>
  </data>
  <data name="OptionCatchExceptions" xml:space="preserve">
    <value>例外のキャッチ</value>
  </data>
  <data name="CategoryRuntimeBehaviorName" xml:space="preserve">
    <value>実行時の動作</value>
  </data>
  <data name="CouldNotTerminate" xml:space="preserve">
    <value>{1} に開始したプロセス {0} を終了できませんでした: {2}</value>
  </data>
  <data name="Results" xml:space="preserve">
    <value>テスト{0}: 予想 {1} ミリ秒、実際 {2} ミリ秒</value>
  </data>
  <data name="SettingsMessage" xml:space="preserve">
    <value>テスト実行可能ファイル '{0}' を設定しています: {1}</value>
  </data>
  <data name="ParseDurationMessage" xml:space="preserve">
    <value>行 '{0}' の期間を解析できませんでした</value>
  </data>
  <data name="OutputFileMissing" xml:space="preserve">
    <value>出力ファイルが存在しません。テストがクラッシュしましたか?</value>
  </data>
  <data name="ExecutableError" xml:space="preserve">
    <value>実行可能ファイル {0} は別のコンピューターからのものであり、このコンピューターを保護するためにブロックされました。</value>
  </data>
  <data name="ThreadExecutionMessage" xml:space="preserve">
    <value>{0} スレッドでテストを実行しています</value>
  </data>
  <data name="OptionTraitsRegexesBefore" xml:space="preserve">
    <value>テスト前探索</value>
  </data>
  <data name="StackTrace" xml:space="preserve">
    <value>{0}スタック トレース:{1}{2}</value>
  </data>
  <data name="SettingsWrapperString" xml:space="preserve">
    <value>SettingsWrapper はある実行可能ファイルの設定を使用してスレッド '{0}' で既に実行中です。スレッド '{1}' でも使用できません</value>
  </data>
  <data name="OptionEnableParallelTestExecution" xml:space="preserve">
    <value>並列テスト実行</value>
  </data>
  <data name="LocationNotFoundError" xml:space="preserve">
    <value>テスト {0} のソースの場所が見つかりませんでした</value>
  </data>
  <data name="ExecutionString" xml:space="preserve">
    <value>既に実行可能ファイル {0} の設定で実行されています。{1} の設定に切り替えることはできません</value>
  </data>
  <data name="NoSettingConfigured" xml:space="preserve">
    <value>テスト実行可能ファイル '{0}' 用に構成された設定はありません。ソリューションの設定で実行しています: {1}</value>
  </data>
  <data name="RegexTimedOut" xml:space="preserve">
    <value>正規表現 '{0}' がタイムアウトしました: {1}</value>
  </data>
  <data name="ReadTestDurationError" xml:space="preserve">
    <value>テスト期間を読み取ることができませんでした: {0}</value>
  </data>
  <data name="OptionParseSymbolInformation" xml:space="preserve">
    <value>シンボル情報の解析</value>
  </data>
  <data name="CategoryParallelizationName" xml:space="preserve">
    <value>並列処理</value>
  </data>
  <data name="UsingSplitterOnDuration" xml:space="preserve">
    <value>テスト期間に基づいてスプリッターを使用する</value>
  </data>
  <data name="OptionTraitsDescription" xml:space="preserve">
    <value>正規表現に一致するテストケースの特徴を上書き/追加することができます。特徴は、3 つのフェーズで構成されます。最初に、'前の特徴' オプションに基づいて特徴がテストに割り当てられます。次に、テストの特徴 (GTA_Traits.h のマクロを使用して定義されている) がテストに追加され、フェーズ 1 の特徴が新しい値で上書きされます。最後に、'後の特徴' オプションが、ここでも上書き方式で評価されます。
構文: {0} によって特徴から正規表現が区切られ、特徴の名前と値は {1} によって区切られ、正規表現と特徴の各ペアは {2} で区切られます。
例: MySuite\.*{0}Type{1}Small{2}MySuite2\.*|MySuite3\.*{0}Type{1}Medium</value>
  </data>
  <data name="OptionTestDiscoveryRegexDescription" xml:space="preserve">
    <value>空でない場合、この正規表現を使用して、テストが含まれている Google Test 実行可能ファイルが検出されます。
既定の正規表現: {0}</value>
  </data>
  <data name="OptionBatchForTestSetupDescription" xml:space="preserve">
    <value>テストの実行前に実行するバッチ ファイル。複数のテストが並列で実行される場合、バッチ ファイルはスレッドごとに実行されます。プレースホルダー:</value>
  </data>
  <data name="OptionTimestampOutputDescription" xml:space="preserve">
    <value>True の場合、テストおよびデバッグの出力にタイムスタンプが追加されます。</value>
  </data>
  <data name="RestoringSolutionSettings" xml:space="preserve">
    <value>ソリューションの設定を復元しています: {0}</value>
  </data>
  <data name="OptionPrintTestOutput" xml:space="preserve">
    <value>テスト出力の表示</value>
  </data>
  <data name="NothingToReport" xml:space="preserve">
    <value>何もレポートされません。</value>
  </data>
  <data name="OptionCatchExceptionsDescription" xml:space="preserve">
    <value>既定で Google Test は例外をキャッチします。その結果、対応するテストは失敗して、テストの実行が継続します。False を選択すると、例外はそのまま移行し、デバッガーがそれをキャッチできます。
Google Test オプション: {0}</value>
  </data>
  <data name="OptionTestDiscoveryRegex" xml:space="preserve">
    <value>テスト検索の正規表現</value>
  </data>
  <data name="OptionBatchForTestTeardownDescription" xml:space="preserve">
    <value>テストの実行後に実行するバッチ ファイル。複数のテストが並列で実行される場合、バッチ ファイルはスレッドごとに実行されます。プレースホルダー:</value>
  </data>
  <data name="DescriptionOfPlaceholdersForBatches" xml:space="preserve">
    <value>{0} - テストで使用できるディレクトリのパス
{1} - 現在のテストを実行するスレッドの ID</value>
  </data>
  <data name="DescriptionOfPlaceholdersForExecutables" xml:space="preserve">
    <value>{0} - テストが含まれる実行可能ファイル</value>
  </data>
</root>