<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TestDiscoveryCompleted" xml:space="preserve">
    <value>Test discovery completed, overall duration: {0}</value>
    <comment>{0} represents unlocalized duration (e.g. "02:14:18")</comment>
  </data>
  <data name="TestDiscoveryExceptionError" xml:space="preserve">
    <value>Exception while discovering tests: {0}</value>
    <comment>{0} represents localized exception message (e.g. "Cannot load file")</comment>
  </data>
  <data name="TestExecutionCancelled" xml:space="preserve">
    <value>Test execution canceled.</value>
  </data>
  <data name="TestExecutionCompleted" xml:space="preserve">
    <value>Google Test execution completed, overall duration: {0}</value>
    <comment>{0} represents unlocalized duration (e.g. "02:14:18")</comment>
  </data>
  <data name="TestRunningException" xml:space="preserve">
    <value>Exception while running tests: {0}</value>
    <comment>{0} represents localized exception message (e.g. "Cannot load file")</comment>
  </data>
  <data name="VSVersionMessage" xml:space="preserve">
    <value>Could not find out Visual Studio version: {0}</value>
    <comment>{0} represents localized exception message (e.g. "Cannot load file")</comment>
  </data>
  <data name="EnableDebugMode" xml:space="preserve">
    <value> (enable debug mode for more information)</value>
    <comment>Optionally used in ErrorAndWarning string</comment>
  </data>
  <data name="ErrorAndWarning" xml:space="preserve">
    <value>The following errors and warnings have occured during {0} {1}:{2}</value>
    <comment>{0} is TestDiscovery or TestExecution string, {1} is empty or EnableDebugMode string, {2} is line break</comment>
  </data>
  <data name="DoesntMatch" xml:space="preserve">
    <value>{0} does not match {1}</value>
    <comment>{0} represents an unlocalized test name (e.g. "TestSuite1.Test2"), {1} represents an unlocalized test filter value (e.g. "TestCategory=Nightly")</comment>
  </data>
  <data name="Matches" xml:space="preserve">
    <value>{0} matches {1}</value>
    <comment>{0} represents an unlocalized test name (e.g. "TestSuite1.Test2"), {1} represents an unlocalized test filter value (e.g. "TestCategory=Nightly")</comment>
  </data>
  <data name="NoTestCaseFilter" xml:space="preserve">
    <value>No test case filter provided</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Solution settings: {0}</value>
    <comment>{0} is unlocalized list of settings</comment>
  </data>
  <data name="TestCaseFilter" xml:space="preserve">
    <value>Test case filter: {0}</value>
    <comment>{0} is the user-specified filter</comment>
  </data>
  <data name="VSVersion" xml:space="preserve">
    <value>Visual Studio version: {0}</value>
    <comment>{0} represents a number (e.g. "12" or "14")</comment>
  </data>
  <data name="TestDiscovery" xml:space="preserve">
    <value>test discovery</value>
  </data>
  <data name="TestExecution" xml:space="preserve">
    <value>test execution</value>
  </data>
  <data name="ErrorMessage" xml:space="preserve">
    <value>ERROR: {0}</value>
    <comment>{0} is the error message</comment>
  </data>
  <data name="UnknownLiteral" xml:space="preserve">
    <value>Unknown enum literal: {0}</value>
    <comment>{0} represents a number (e.g. "0" or "1")</comment>
  </data>
  <data name="WarningMessage" xml:space="preserve">
    <value>Warning: {0}</value>
    <comment>{0} is the warning message</comment>
  </data>
  <data name="IdentifyVSError" xml:space="preserve">
    <value>Could not identify Visual Studio version. {0} requires at least Visual Studio 2012 Update 1.</value>
    <comment>{0} is ExtensionName string from Common.Dynamic.TAfGT resources file</comment>
  </data>
  <data name="VS2012Error" xml:space="preserve">
    <value>{0} requires at least Visual Studio 2012 Update 1 - please update your Visual Studio installation.</value>
    <comment>{0} is ExtensionName string from Common.Dynamic.TAfGT resources file</comment>
  </data>
  <data name="DebuggingMessage" xml:space="preserve">
    <value>Debugging is only possible if GoogleTestAdapter has been installed into Visual Studio - NuGet installation does not support this (and other features such as Visual Studio Options, toolbar, and solution settings).</value>
  </data>
  <data name="FilterInvalid" xml:space="preserve">
    <value>Test case filter is invalid: {0}</value>
    <comment>{0} represents localized exception message (e.g. "Cannot load file")</comment>
  </data>
  <data name="TraitIgnoreMessage" xml:space="preserve">
    <value>Trait has same name as base test property and will thus be ignored for test case filtering: {0}</value>
    <comment>{0} represents unlocalized name for trait (e.g. "Test")</comment>
  </data>
  <data name="CouldNotAttachMessage" xml:space="preserve">
    <value>Could not attach debugger to process {0}:{1}{2}</value>
    <comment>{0} represents a process id (e.g. "10480"), {1} is a line break, {2} is an exception message</comment>
  </data>
  <data name="DebuggerAttachMessage" xml:space="preserve">
    <value>Could not attach debugger to process {0}, no error message available</value>
    <comment>{0} represents a process id (e.g. "10480")</comment>
  </data>
  <data name="DebuggerAttachTime" xml:space="preserve">
    <value>Debugger attached to process {0}, took {1} ms</value>
    <comment>{0} represents a process id (e.g. "10480"), {1} represents a number (e.g. "12" or "14")</comment>
  </data>
  <data name="MoreInformationMessage" xml:space="preserve">
    <value>There might be more information on the problem in Visual Studio's ActivityLog.xml (see e.g. https://blogs.msdn.microsoft.com/visualstudio/2010/02/24/troubleshooting-extensions-with-the-activity-log/)</value>
  </data>
  <data name="Invalid" xml:space="preserve">
    <value>Invalid {0}</value>
    <comment>{0} represents unlocalized settings name (e.g. "GoogleTestAdapterSettings")</comment>
  </data>
  <data name="ProcessNotFound" xml:space="preserve">
    <value>Could not find process</value>
  </data>
  <data name="UnknownEnum" xml:space="preserve">
    <value>Unknown enum literal: {0}</value>
    <comment>{0} represents a number (e.g. "0" or "1")</comment>
  </data>
  <data name="UnknownVisualStudioVersion" xml:space="preserve">
    <value>Unknown Visual Studio version: {0}</value>
    <comment>{0} is version number (e.g. "15.0")</comment>
  </data>
  <data name="CantParseSettings" xml:space="preserve">
    <value>Solution test settings file could not be parsed, check file: {0}
Exception: {1}</value>
    <comment>{0} represents the path to a solution test settings file. {1} represents a textual summary of an exception, likely non-localized.</comment>
  </data>
  <data name="RunSettingsMissingNode" xml:space="preserve">
    <value>RunSettingsDocument does not contain a RunSettings node! Canceling settings merging...</value>
  </data>
</root>