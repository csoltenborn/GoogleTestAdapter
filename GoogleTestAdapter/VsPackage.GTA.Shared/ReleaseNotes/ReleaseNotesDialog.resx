<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAEACACoDgAAFgAAACgAAAAwAAAAYAAAAAEACAAAAAAAAAkAAAAAAAAAAAAAAAEAAAAB
        AABAu1cABcX6ADujGwA/tEYAPKgmAFa35wAfV4gAC7z0AN23lQDmkiwAyuf1AAAA6QAlsfQAhMrsAOXF
        qwCp0qMAQsJoAKSh8AA8rDEAW8HlAMtmAQDIx/EAOZgAADqUAABIlhEA2IgxAAW16ADy4tQA0o1OACJi
        pQBlXuEAGrHxANPo0gDXeRMAELTvAAAA+wA6iwEAQb5fAAAA3QAAAPIALcLrAEahFAD8/fwA6en8ACKn
        7QAZo+QArNvxALhWAgC9YQwAyncsAOzUvgD27OQAJ2pVAC6l7wA6nQkAEKbbAD6wOwC4g2AAERH6ABw8
        rgDcgRoAr2YsAFGbLAAKqeIA1HMNAEPHcQCrXBwAOqARADGt9gDDWwAAPaRGADafhABAuE4A+vPtAETG
        UgCzXhQAxWsXABAS2QATE+oAPzzqAN/v+QCbThkA2aV2AJtXKwBBuzcAAADPANiZXwDm8eIAPqnpAISz
        YgD69vIA8/j8APv69wAmrtwAz2wGAKdqRQBnpkAAqlILAK1MAAA0lAIAEBHLANza+AD1+fIAP7JYADGO
        cgDv9u4A4YkhAKRYHgAtsPYAPa9jADuhJQA2mREAECKyACbN+AC62b4AMYlPAMHi9QBktl4AS69MAC97
        ggBTq0UAUKZcAMTfuwB/w38A3ZdMAD+xHQD///8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAf35+fn5+KltQCi4uLi50UFsqfn5+fn5pWSQYGBgYGBgYGBgYGBgYGBgYGBgYGFlcfn5+fip0
        DQVYNTU1NTU1NQUNCn5+fn5+flkkJBcXFxcXFxcXFxcXJBckJCQkJCRZfn5+UAU1LEQMbGxsbGxsREQ1
        WA1bfn5+fipZJCQWFxcXFxcXFxcXFyQkJCQkJCQYfn5QWCwMbAwMDAwMDAxsbGxERDUFW35+fn5aPiQX
        FhcWFxcXFxcXFxcXFyQkJCQYfioTLAwMHx8fDB8fHwwMDAxsbEQ1DSp+fn5+eiQXFhYWFhcXFxcXFxcX
        FxckJCQYKgotHx8fHx8fIh8fHx8fHwwMbGxENVB+fn5+fmAkFhYWFhYWFhYXFxcXFxcXFxcYfg0tHx8i
        IiIiIiIiIh8iHx8MDAxsLA1+fn5+fg8kFxYWFhYWFhYWFxYXFxcXFyQYKgU/IiIiIiIiByIiIiIiIiIf
        Hx8MNRN+fn5+flcYFxYWFhYWFhYWFhYWFxcXFxcYfgU/IiIHBwcHBwcHByIHIiIiHx8MLAV+fn5+fio+
        FxYWFhYWFhYWFhYWFhcXFxcYKgU/IgcHBwcHBwcHBwcHByIiIh8fLQ1+fn5+fn5gYxY2NhYWFhYWFhYW
        FhYXFxcYfi43GgcHAQEBAQEBBwEHBwciIiIfNy5+fn5+fn5gY0M2NjY2FhYWFhYWFhYWFxcpKltdGgcB
        AQEBAQEBAQEBBwcHIiI3WFt+fn5+fipgb0NDQ0M2NjYWFhYWFhYWFhYYfn4uNxoBAQEBAQEBAQEBAQcH
        Ij83Cn5+fn5+flc+QwICQ0NDNjY2NhYWFhYWFhYpfn4qLj8aAQEBAQEBAQEBAQcHGjcufn5+fn5+KnJv
        AgICAgJDQ0M2NjYWFhYWFhYpfn5+fgoTGigocXFxAQEBAQcaXXR+fn5+fn5+flkCBAQEAgICAkNDQzY2
        FhYWFhYpfn5+fn5+Cg0TExMoKAcHGj8FUH5+fn5+fn5+em4EBAQEBAIEAgJDQ0M2NhYWFhYpKioqfn5+
        fn4qUAouDQ0TKA0qfn5+fn5+fn5XeAQSEhIEBAQEAgICAkNDNjYWFhYpCDMqKn5+fn5+fn5+fn5+fn5+
        fn5+fn5+fml1bjg4EhISEhIEBAQCAkNDQzY2FhYpU1M5DhtbfioqKioqKn5+fn5+fn5+fn5+aXUSODg4
        ODgSEhISBAQEAgICQ0M2FhYpPVNRUVNfOVIIDjIbWn5+fn5+fn5+fn4gdRIDAwMDODg4OBISEgQEBAIC
        Q0M2NhYpPWtra2trUVFRUVFfM35+fn5+fn5+Knp2OAMDAwMDAwM4ODgSEhIEBAQCAkNDNhYpPUJCQkJC
        QkJCa1Eyfn5+fn5+fn4qD0YDSEhISEhIAwMDAzg4EhISBAQCAkNDNjYpPUtLS0tLS0JLYTkqfn5+fn5+
        fmZ7OANISEgASEhISEgDAwM4OBISEgQEAgJDQzYpPUtLSzBLMEtLYQh+fn5+fn4qKnsSSEhIAAAAAAAA
        AEhIAwMDODgSEgQEAgICQzYpTDAwMDAwSzBLYg5+fn5+fn5+V0YDAAAAJSUlJSUAAABISAMDODg4EgQE
        BAICQzYpTDAwMDAwL2FiYgh+fn5+fn5+ekZIAAAlJSUQJSUlJQAASEgDAzg4EhIEBAICQ0MpTBQwMC8v
        MVYICBt+fn5+fn5+aXlGACUlEBAQEBAlJSUAAEgDAzg4EhISBAQCQ0MpTEUvLxwyKn5+fn5+fn5+fn5+
        fnJGZyUQEBBBEBAQJSUAAEhIAwM4OBIEBAICAkMpTC8xMip+fn5+fioqXCp+fn5+fn4PRmcQEEFBQUEQ
        ECUlAEhIAwM4OBISBAQCAkMpMFJJfn5+fn5+WjIICA4zfn5+fn5+cnlnEEFBQUEQECUlAABIAwM4OBIS
        BAICQzY+Dip+fn5+fn4bMUVFRUVMUkl+fn5+fmV3Z0FBQUFBEBAlAABIAwM4OBISBAR9QzRwfn5+fn5+
        fjMxRRQUFBRFRTEzfn5+fioVO3dBQUEQEBAlAABISAM4OBJ9fQI0cFVkfn5+fn5+flZFXhQUFBQUFEUc
        XH5+fn5+EVVwHUcQQUpKSkpUVFRUVBJzBnAmVVVkfn5+fn5+MhReXl4UFBQUFBRFMn5+fn5+Kh5VCyZN
        Ox13d2hod3cGO2QmJiZVVVVkfn5+fn5+fF5AQF5eXhQUFBRFUn5+fn5+fmVkJgsLJycnJycnJycnCwsm
        JiZVVVVkfn5+fiozIUAhQEBAXl4UFBRFHH5+fn5+fipPJgsLJwsnCycLCwsLCwsLJiYmJlVkfn5+fn4I
        QDwhISFAQF5eFBRFMX5+fn5+fn4RJgsnJycnJycnJwsLCwsLJgsmJlVNfn5+fn5WITw8PCEhQEBeXhRF
        GX5+fn5+fn4RJgsnJycjJycnJycnJwsLCyYmJlVNfn5+flwZPGo8PDwhIUBAXhRFHH5+fn5+fn4VJicn
        IycnJycnJycnJwsLCwsmJiZNfn5+fjMZampqajw8ISFAXl5FUn5+fn5+fn4VJicnJyMjIyMjIycnJycL
        CwsLJiZNfn5+fhtqaglqamo8PCFAQF5FDn5+fn5+fn4RCycjIyMjIyMjIycjJycnCwsLJiZNfn5+KhsJ
        CQkJamo8PCEhQF4wM35+fn5+fioRCyMjIyMjIyMjIyMjJycnCwsLCyZNfn5+fjMJCQkJCWpqPDwhQBQc
        Kn5+fn5+fn5PJyMjIyMjIyMjIyMjJycnJwsLJiZNfn5+flx8CQkJCWpqPDwhQEUOfn5+fn5+fmVOJyMj
        IyMjIyMjIyMjIycnJwsLCyZNfn5+fn5SCQkJCQlqPDwhXjFafn5+fn5+fh4nIyMjIyMjIyMjIyMjJycn
        JwsLCyZNfn5+fn4yagkJCQlqajwhFA5+fn5+fn4qFQsnIyMjIyMjIyMjIyMjIycnJwsLCyZOfn5+fn5+
        CDwJGWpqPCEUVn5+fn5+fn4rTwsnIyMjIyMjIyMjIyMjJycnJwsLCyYRf35+fn5+KggZGRkZPDEcSX5+
        fn5+fitPTjo6Ojo6Ojo6Ojo6Ojo6Ojo6Tk5OTxF/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAQAA
</value>
  </data>
</root>